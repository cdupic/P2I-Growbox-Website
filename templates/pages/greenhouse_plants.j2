{% extends "greenhouse_template.j2" %}

{% block content %}

    <div class="heading">
        <div class="title">
            <h1>Gestion des plantes</h1>
            <p>{{ greenhouse_name }} contient {{ available_plants|length }} plantes</p>
        </div>
    </div>

    <div>

        <style>
            #plantForm {

            }
            #plantForm .association {

            }
            #plantForm .association .controls {
                display: flex;
            }
            #plantForm .association .config p{
                font-size: .8em;
            }
        </style>


        <form id="plantForm" method="POST" action="{{ url_for('plant_manager') }}">

            <h2>Plantes actuellement dans la serre</h2>

            {% for association_id, (plant_id, count, start_date, _) in current_plants.items() %}

                <div class="association" data-association-id="{{ association_id }}">
                    <div class="controls">
                        <p>{{ available_plants[plant_id][0] }}</p>
                        <p>{{ start_date }}</p>


                        <input type="number" name="count_{{ association_id }}" value="{{ count }}" min="0">

                        <button type="button" onclick="removePlant({{ association_id }})">Remove</button>
                    </div>
                    <div class="config">
                        <p>Temp&#x202F;: {{ available_plants[plant_id][1] }}°C, Sol HR&#x202F;: {{ available_plants[plant_id][2] }}%, Air HR&#x202F;: {{ available_plants[plant_id][3] }}, Lux&#x202F;: {{ available_plants[plant_id][4] }}, O2&#x202F;: {{ available_plants[plant_id][5] }}</p>
                    </div>
                </div>

            {% endfor %}

            <h2>Ajouter une plante</h2>

            <div class="add-plant-inputs">
                <label for="input-plant-search" style="display: none">Rechercher une plante</label>
                <input type="text" name="input-plant-search" id="input-plant-search">
                <label for="input-plant-count" style="display: none">Rechercher une plante</label>
                <input type="number" min="0" name="input-plant-count" id="input-plant-count">
            </div>
            <ul id="plant-results">

            </ul>
        </form>

        <p> Plantes présentes auparavant </p>
        <ul>
            {% for couple in plants_history_greenhouse %}
                {%  for plante, dates in couple.items() %}
                    <p>  {{ plante }}  du : {{ dates[0]}} au {{ dates[1] }} </p>
                {%  endfor %}
            {% endfor %}
        </ul>
    </div>

    <div>
        <h2>Configurer les asservissements manuellement</h2>
        <p> Plantes actuellement présentes</p>
    </div>

    <script>
        let newPlants = [];
        let removePlants = [];

        function addPlant() {
            const plantSelect = document.getElementById('newPlantSelect');
            const plantCount = document.getElementById('newPlantCount').value;
            const plantId = plantSelect.value;
            const plantName = plantSelect.options[plantSelect.selectedIndex].text;

            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${plantName}</td>
                <td>...</td> <!-- Temperature -->
                <td>...</td> <!-- Soil Humidity -->
                <td>...</td> <!-- Air Humidity -->
                <td>...</td> <!-- Light -->
                <td>...</td> <!-- O2 -->
                <td>New</td> <!-- Start Date -->
                <td><input type="number" name="count_new_${plantId}" value="${plantCount}" min="1"></td>
                <td><button type="button" onclick="removeNewPlant(this, '${plantId}')">Remove</button></td>
            `;
            document.getElementById('currentPlants').appendChild(row);
            newPlants.push(plantId + ':' + plantCount);
            updateHiddenInputs();
        }

        function removePlant(associationId) {
            const row = document.querySelector(`tr[data-association-id="${associationId}"]`);
            if (row) {
                row.remove();
                removePlants.push(associationId);
                updateHiddenInputs();
            }
        }

        function removeNewPlant(button, plantId) {
            const row = button.closest('tr');
            row.remove();
            newPlants = newPlants.filter(np => !np.startsWith(plantId + ':'));
            updateHiddenInputs();
        }

        function updateHiddenInputs() {
            document.getElementById('newPlantsInput').value = newPlants.join(',');
            document.getElementById('removePlantsInput').value = removePlants.join(',');
        }

        document.addEventListener("DOMContentLoaded", function() {
            const availablePlants = Object.entries({{ available_plants|tojson }});
            const plantInput = document.getElementById('newPlantInput');
            const plantList = document.getElementById('plantList');

            plantInput.addEventListener('input', function() {
                const searchValue = plantInput.value.toLowerCase();
                const filteredPlants = availablePlants.filter(([id, [name]]) => name.toLowerCase().includes(searchValue));

                plantList.innerHTML = '';
                filteredPlants.forEach(([id, [name]]) => {
                    const option = document.createElement('div');
                    option.textContent = name;
                    option.setAttribute('data-plant-id', id);
                    option.addEventListener('click', function() {
                        plantInput.value = name;
                        plantInput.setAttribute('data-plant-id', id);
                        plantList.innerHTML = '';
                    });
                    plantList.appendChild(option);
                });
            });
        });

        document.getElementById('plantForm').addEventListener('submit', function(event) {
            const counts = document.querySelectorAll('input[name^="count_"]');
            counts.forEach(count => {
                if (count.name.startsWith('count_new_') && count.value == 0) {
                    const plantId = count.name.replace('count_new_', '');
                    newPlants = newPlants.filter(np => !np.startsWith(plantId + ':'));
                } else if (count.name.startsWith('count_') && count.value == 0) {
                    const associationId = count.name.replace('count_', '');
                    removePlants.push(associationId);
                }
            });
            updateHiddenInputs();
        });
    </script>


{% endblock %}
